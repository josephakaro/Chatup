// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String            @unique
  password  String?
  avatar    String?
  groups    GroupMembership[] @relation("UserGroups")
  messages  Message[]         @relation("UserMessages")
  Privetemessages  Message[]         @relation("PrivateMessages")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Group {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  members     GroupMembership[] @relation("GroupMembers")
  messages    Message[]         @relation("GroupMessages")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model GroupMembership {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  user    User     @relation("UserGroups", fields: [userId], references: [id])
  userId  String    @db.ObjectId
  group   Group    @relation("GroupMembers", fields: [groupId], references: [id])
  groupId String  @db.ObjectId

  @@unique([userId, groupId])
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sender      User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId    String  @db.ObjectId 
  recipientId String  @db.ObjectId
  recipient   User?    @relation("PrivateMessages", fields: [recipientId], references: [id])
  group       Group?   @relation("GroupMessages", fields: [groupId], references: [id])
  groupId     String?   @db.ObjectId
  content     String
  createdAt   DateTime @default(now())
}